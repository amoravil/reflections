
When would you want to use a remote repository rather than keeping all your work
local?

	When I used more than one computer to work in my projects.
  	When I want to have a collaborative project.
  	When I want to keep save my work. 
  
  
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
	
	If you are working in some changes, you would like decide when you are 
	ready to get a new version and merge with you new work. 
	You are doing some experiments that not required the last version.  

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

  forks copy a repository in a new one that is in github too.
  clones copy a repository (local or remote) in a new one that is local.
  branches create a new branch of a commit to work independently but in the 
  same repository

What is the benefit of having a copy of the last known state of the remote
stored locally?
  
  You can always compare/merge your version with the last known state 
  without need to be connected to the remote storage.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

  email and shared directory with all of version in diferent subdirectors.
  ok for one file without many changes because you don't need a big infraescture
  harder for an active project, or many files

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    fix defects, new functionality, experiments 
    or just to keep organized my work and clean the product in master.
    

final quiz

Repository: https://github.com/udacity/create-your-own-adventure.git

1. fork to amoravil: option in GitHub
now in: https://github.com/amoravil/create-your-own-adventure.git

2. clone local: 
  git clone https://github.com/amoravil/create-your-own-adventure.git

3. create a branch: 
  git branch my-adventure
  git checkout my-adventure 

      'You could make your changes directly to the master branch in your fork, but when contributing to a public repository, itâ€™s standard practice to make the changes in a non-master branch within the fork. This way, you can easily keep your master branch up-to-date with master of the original repository, and merge changes from master into your branch when you are ready.'

4. Collaborative with my adventure
      vi arqueros.md 
      git add arqueros.md
      git commit
      git push origin my-adventure
      create a pull request in GitHub (original-master, fork-my-adventure)
    
